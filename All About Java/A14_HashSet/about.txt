[Collection Interface]
        ↑
     [Set Interface]
        ↑
+-------+-------+--------------+
|               |               |
[HashSet]  [LinkedHashSet]  [SortedSet]
                            ↑
                            [NavigableSet]
                            ↑
                            [TreeSet]
*** Set Interface Overview
The Set interface in Java represents a collection that:
    Contains unique elements only (no duplicates)
    Allows at most one null element
    Does not maintain insertion order (except LinkedHashSet)
    Extends the Collection interface
*******************************
1. HashSet
    Implementation: Uses hash table (HashMap internally)
    Features:
        Fastest operations (O(1) average time)
        No ordering guarantees
        Permits one null element
    Set<String> set = new HashSet<>();
    set.add("Apple");
    set.add("Banana");
    // Output order unpredictable

2. LinkedHashSet

    Implementation: Hash table + linked list
    Features:
        Maintains insertion order
        Slightly slower than HashSet due to linked list overhead
        Permits one null element
    When to use: When you need no duplicates + insertion order

    Set<String> set = new LinkedHashSet<>();
    set.add("Apple");
    set.add("Banana");
    // Output order: Apple, Banana (insertion order)

3. SortedSet & NavigableSet (TreeSet)
    Implementation: Red-Black tree (balanced BST)
    Features:
        Elements stored in sorted order (natural ordering or Comparator)
        Slower operations (O(log n) time)
        Doesn't permit null (in most Java versions)
    Additional methods:
        first(), last()
        headSet(), tailSet()
        subSet()
    When to use: When you need sorted unique elements
    Set<String> set = new TreeSet<>();
    set.add("Banana");
    set.add("Apple");
    // Output order: Apple, Banana (sorted)